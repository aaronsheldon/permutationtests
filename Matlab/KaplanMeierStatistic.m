% Author.....: Aaron Sheldon
% Date.......: April, 2010
% Description: Calculate the Kolmogorov Smirnov difference statistic of the 
%              of two cummulative distributions derived from their Kaplan 
%              Meier survival curves. Correct for untied data only. Returns 
%              the maximum distance that the cumulative distribution of the 
%              first sample is above the cumulative distribution of the second 
%              sample, the maximum distance that the cumulative distribution 
%              of the first sample is below the cumulative distribution of 
%              the second sample, the fraction of the total interval on
%              which the first cumulative distribution is completely above 
%              the second cumulative distribution, and the fraction of the 
%              total interval where the first cumulativedistribution is 
%              completely below the second cumulative distribution.
%
% % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % %
%                                                                         %
% Copyright 2010 Aaron Sheldon                                            %
%                                                                         %
% This program is free software: you can redistribute it and/or modify    % 
% it under the terms of the GNU General Public License as published by    %
% the Free Software Foundation version 3 of the License.                  %
%                                                                         %
% This program is distributed in the hope that it will be useful,         %
% but WITHOUT ANY WARRANTY; without even the implied warranty of          %
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           %
% GNU General Public License for more details.                            %
%                                                                         %
% You should have received a copy of the GNU General Public License       %
% along with this program.  If not, see <http://www.gnu.org/licenses/>.   %
%                                                                         %
% % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % %
%
% parameter..: array(float) OutcomeOne        Times of outcome events in the first sample
% parameter..: array(float) CensorOne         Times of censor events in the first sample
% parameter..: array(float) OutcomeTwo        Times of outcome events in the second sample
% parameter..: array(float) CensorTwo         Times of outcome events in the second sample
% return.....: array(float) DistanceStatistic Kolmogorov-Smirnov vector statistic
%
function DistanceStatistic = KaplanMeierStatistic(OutcomeOne, CensorOne, OutcomeTwo, CensorTwo)
  
  % Escape with bad data
  if ~ (isnumeric(OutcomeOne) && isnumeric(CensorOne) && isnumeric(OutcomeTwo) && isnumeric(CensorTwo))
    sprintf('%s', 'Data must be numeric.')
    DistanceStatistic = [];
    return
  end

  % Coerce the first outcome data
  OutcomeOne = reshape                                            ...
  (                                                               ...
    abs  (OutcomeOne(~ (isnan(OutcomeOne) | isinf(OutcomeOne)))), ...
    numel(OutcomeOne(~ (isnan(OutcomeOne) | isinf(OutcomeOne)))), ...
    1                                                             ...
  );

  % Coerce the first censor data
  CensorOne = reshape                                          ...
  (                                                            ...
    abs  (CensorOne(~ (isnan(CensorOne) | isinf(CensorOne)))), ...
    numel(CensorOne(~ (isnan(CensorOne) | isinf(CensorOne)))), ...
    1                                                          ...
  );
  
  % Coerce the second outcome data
  OutcomeTwo = reshape                                            ...
  (                                                               ...
    abs  (OutcomeTwo(~ (isnan(OutcomeTwo) | isinf(OutcomeTwo)))), ...
    numel(OutcomeTwo(~ (isnan(OutcomeTwo) | isinf(OutcomeTwo)))), ...
    1                                                             ...
  );

  % Coerce the second censor data
  CensorTwo = reshape                                          ...
  (                                                            ...
    abs  (CensorTwo(~ (isnan(CensorTwo) | isinf(CensorTwo)))), ...
    numel(CensorTwo(~ (isnan(CensorTwo) | isinf(CensorTwo)))), ...
    1                                                          ...
  );
  
  % Get the total number of data points in each sample
  OutcomeOneCount = numel(OutcomeOne);
  CensorOneCount  = numel(CensorOne);
  CountOne        = OutcomeOneCount + CensorOneCount;
  OutcomeTwoCount = numel(OutcomeTwo);
  CensorTwoCount  = numel(CensorTwo);
  CountTwo        = OutcomeTwoCount + CensorTwoCount;
  
  % Sort the first events by time
  SampleOne = sortrows                        ...
  (                                           ...
    [                                         ...
      [OutcomeOne, ones(OutcomeOneCount, 1)]; ... 
      [CensorOne , zeros(CensorOneCount, 1)]  ...
    ],                                        ... 
    1                                         ...
  );
  
  % Sort the second events by time
  SampleTwo = sortrows                        ...
  (                                           ...
    [                                         ...
      [OutcomeTwo, ones(OutcomeTwoCount, 1)]; ...
      [CensorTwo , zeros(CensorTwoCount, 1)]  ...
    ],                                        ... 
    1                                         ...
  );
  
  % First sample Kaplan Meier estimate of the probability density of the
  SampleOne(:, 2) = SampleOne(:, 2) ./ (CountOne:-1:1)';
  SampleOne(:, 2) = SampleOne(:, 2) .*          ...
  [                                             ...
    1;                                          ...
    cumprod(1 - SampleOne(1:(CountOne - 1), 2)) ...
  ];
  
  % Second sample Kaplan Meier estimate of the probability density of the
  SampleTwo(:, 2) =   SampleTwo(:, 2) ./ (CountTwo:-1:1)';
  SampleTwo(:, 2) = - SampleTwo(:, 2) .*        ...
  [                                             ...
    1;                                          ...
    cumprod(1 - SampleTwo(1:(CountTwo - 1), 2)) ...
  ];  
  
  % Concatenate the matrices and sort by event time
  SortSample = sortrows ...
  (                     ...
    [                   ...
      SampleOne;        ... 
      SampleTwo         ...
    ],                  ...
    1                   ...
  );

  % Simple intervals for measuing dwell fraction
  TotalInterval = SortSample(end, 1) - SortSample(1, 1);
  EventInterval =                                      ...
  [                                                    ...
    0;                                                 ...
    SortSample(2:end, 1) - SortSample(1:(end - 1), 1); ...
    0;                                                 ...
  ];
  
  % Partial sums for interval lengths and difference between curves
  SignedDifference =         ...
  [                          ...
    0;                       ...
    cumsum(SortSample(:, 2)) ...
  ];
  
  % Initialize return variables
  AboveMaximum  = max(  SignedDifference);
  BelowMaximum  = max(- SignedDifference);
  AboveFraction = sum((SignedDifference > 0) .* EventInterval) ./ TotalInterval;
  BelowFraction = sum((SignedDifference < 0) .* EventInterval) ./ TotalInterval;

  % Return the result
  DistanceStatistic = [AboveMaximum, BelowMaximum, AboveFraction, BelowFraction];
end
